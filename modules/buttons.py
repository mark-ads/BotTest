from telebot.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from modules.telegram_bot import bot
from modules.users import is_user, is_admin, is_request, process_add_request_last_name, set_command_menu, show_requests, show_users, process_remove_user, process_add_admin, remove_admin, show_user_info
from modules.users import check_subscription
from modules.states import states_set, states_back, save_states_now, clear_states
from gpt.dialogs import choose_gpt, disconnect_gpt, gpt_text_handler, waiting_for_gpt, stop_waiting
from utils.logs import gpt_logger, user_logger, logger, log_message
from modules.notify import show_notification_menu
from gpt.update_promt import show_prompt_menu_call, show_prompt_menu_message
import threading
import time

# –ú–æ–¥—É–ª—å —Å–æ –≤—Å–µ–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é (–≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –≤—Å–µ Reply –∫–Ω–æ–ø–∫–∏)

#--------------------------- –ì–õ–ê–í–ù–û–ï ---------------------------
#---------------------------- –ú–ï–ù–Æ -----------------------------
@bot.message_handler(func=lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def show_main_menu(message):
    if is_user(message.from_user.id):
        clear_states(message.from_user.id)
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    else:
        markup = check_status()
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def show_main_menu2(message):
    if is_user(message.from_user.id):
        clear_states(message.from_user.id)
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    else:
        markup = check_status()
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=markup)


    
#-------------------------- –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï --------------------------
#----------------------------- –ö–ù–û–ü–ö–ò ------------------------------

# –∫–Ω–æ–ø–∫–∞ /start
def start_chat_logic():
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        try:
            if is_user(message.from_user.id):
                markup = create_main_menu()
                bot.send_message(message.chat.id, '''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.''', reply_markup=markup)
                clear_states(message.from_user.id)
            else:
                markup = access_request()
                bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. \n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.', reply_markup=markup)
                log_message(user_logger, "INFO", '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "/start"', message.from_user.id)
        except telebot.apihelper.ApiTelegramException as e:
            if "bot was blocked by the user" in str(e):
                log_message(user_logger, "INFO", '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞', message.from_user.id)
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {message.chat.id}")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_status():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'))
    return markup

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
def check_status_menu(message):
    if is_admin(message.from_user.id):
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=markup)
        clear_states(message.from_user.id)
    elif is_user(message.from_user.id):
        markup = create_main_menu()
        bot.send_message(message.chat.id, '''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –≤—Å—ë, —á—Ç–æ–±—ã –í—ã —Å—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–µ–µ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏! –í–∞—à–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏:

üìå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ ‚Äî –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏.
üìå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
üìå –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤, —Å—Ç–æ—Ä–∏—Å –∏ —Ä–∏–ª—Å–æ–≤ –¥–ª—è SMM.
üìå –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –≤–≤–æ–¥ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏.
üìå –õ–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ ‚Äî –ø–æ–º–æ—â—å –≤ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
üìå –ò–ø–æ—Ç–µ–∫–∞ ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ –∏–ø–æ—Ç–µ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.
üìå –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤ ‚Äî –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
üìå –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∑–∞–∫–∞–∑ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.
üìå –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

üìñ –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ù–∞–∂–º–∏—Ç–µ ¬´–û –ø—Ä–æ–≥—Ä–∞–º–º–µ¬ª –≤ –º–µ–Ω—é, –∞ –∑–∞—Ç–µ–º ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ‚Äî –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –æ–±—â–∞–π—Ç–µ—Å—å –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω. 
–≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è, —É–ª—É—á—à–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üöÄ''', reply_markup=markup)
        clear_states(message.from_user.id)
    elif is_request(message.from_user.id):
        markup = ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.\n–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=markup)
        threading.Thread(target=delay_response, args=(message,)).start()
    else:
        markup = access_request()
        bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. \n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=markup)

# –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø
def access_request():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(
        KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø')
        )
    return markup

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def request_menu(message):
    if is_user(message.from_user.id):
        markup = create_main_menu()
        clear_states(message.from_user.id)
        bot.send_message(message.chat.id, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", reply_markup=markup)
    elif is_admin(message.from_user.id):
        markup = create_main_menu()
        clear_states(message.from_user.id)
        bot.send_message(message.chat.id, "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=markup)
    elif is_request(message.from_user.id):
        markup = check_status()
        bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞", reply_markup=markup)
    else:
        log_message(user_logger, "INFO", '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞', message.from_user.id)
        markup = ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup = markup)
        bot.register_next_step_handler_by_chat_id(message.chat.id, process_add_request_last_name)

# –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
def delay_response(message):
    markup = check_status()
    bot.send_message(message.chat.id, "–ë–æ—Ç —Å–ø–∏—Ç 3 —Å–µ–∫—É–Ω–¥—ã.")
    time.sleep(3)
    bot.send_message(message.chat.id, "–ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è.", reply_markup=markup)

# –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π GPT
@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞")
def handle_disconnect_button(message):
    user_id = message.from_user.id
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
    response = disconnect_gpt(user_id)
    log_message(gpt_logger, "INFO", f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{user_id}": –û—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞')
    bot.reply_to(message, response)
    stop_waiting(user_id)
    functions_map[states_back(message.from_user.id)](message)


# –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_button(message):
    if not is_user(message.from_user.id):
        markup = check_status()
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", reply_markup=markup)
        return
    user_id = message.from_user.id
    functions_map[states_back(user_id)](message)

@bot.message_handler(commands=['update_menu'])
def handle_update_command_menu(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.reply_to(message.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    set_command_menu(message)

@bot.message_handler(commands=['save_states'])
def handle_update_command_menu(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.reply_to(message.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    result = save_states_now()
    if result == True:
        bot.send_message(user_id, '–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    else:
        bot.send_message(user_id, result)

# —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback data
@bot.callback_query_handler(func=lambda call: is_user(call.from_user.id))
def handle_admin_callback(call: CallbackQuery):
    user_id = call.from_user.id
    data = call.data

    if data.startswith("user_management"):
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return

        action = data.split(":")[1]

        if action == "show_users":
            show_users(user_id)

        elif action == "remove_user":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
            bot.register_next_step_handler_by_chat_id(user_id, process_remove_user)

        elif action == "add_admin":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            bot.register_next_step_handler_by_chat_id(user_id, process_add_admin)

        elif action == "remove_admin":
            remove_admin(user_id)
        
        elif action == "requests":
            show_requests(call.message)

        elif action == 'save_states':
            result = save_states_now()
            if result == True:
                bot.send_message(user_id, '–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            else:
                bot.send_message(user_id, result)

        elif action == 'set_command_menu':
            set_command_menu(call)
            
        elif action == 'info':
            first_message = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            bot.register_next_step_handler(call.message, show_user_info, first_message)

        elif action == "back_to_main":
            main_menu = create_main_menu()
            bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

    elif data.startswith("clear_history"):
        bot.answer_callback_query(call.id)
        if not is_user(call.from_user.id):
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        assistant_name = data.split(":")[1]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        result = detect_delete_method(user_id, assistant_name)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        remaining_assistants = check_dialogs_and_threads(user_id)
    
        if remaining_assistants:
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            markup = InlineKeyboardMarkup()
            for assistant in remaining_assistants:
                markup.add(InlineKeyboardButton(assistant, callback_data=f'clear_history:{assistant}'))
        
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é:",
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞."
            )

        bot.send_message(call.message.chat.id, result)



# –∫–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

functions_map = {
    'show_main_menu' : show_main_menu,
    'show_work_menu' : show_work_menu,
    'show_assistants_menu' : show_assistants_menu
    }